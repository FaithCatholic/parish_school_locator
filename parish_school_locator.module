<?php

/**
 * @file
 * Contains parish_school_locator.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function parish_school_locator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the parish_school_locator module.
    case 'help.page.parish_school_locator':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Find parishes and schools by address, name, and mass time') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function parish_school_locator_theme() {
  return [
    'parish_school_locator' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter()
 */
function parish_school_locator_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Parish finder exposed view form
  if (   $form['#id'] == 'views-exposed-form-parish-finder-page-1'
      || $form['#id'] == 'views-exposed-form-parish-finder-page-2'
      || $form['#id'] == 'views-exposed-form-school-finder-page-1'
      || $form['#id'] == 'views-exposed-form-school-finder-page-2') {

    // Hide proximity filter fields
    $form['field_geolocation_proximity']['#type'] = 'hidden';
    $form['field_geolocation_proximity-lat']['#type'] = 'hidden';
    $form['field_geolocation_proximity-lng']['#type'] = 'hidden';

    // Create custom address field for geocoding
    $form['field_geocoded_address']['#type'] = 'textfield';
    $form['field_geocoded_address']['#title'] = t('Nearest to');
    $form['field_geocoded_address']['#attributes']['placeholder'] = t('Enter an address, city & state, or zip code');

    // Add a custom form validator for geocoding
    $form['#validate'][] = '_parish_school_locator_validate';
  }
}

/**
 * Custom form validator for exposed filter
 */
function _parish_school_locator_validate(array &$form, FormStateInterface $form_state) {

  // Get address entered by user
  $address = $form_state->getValue('field_geocoded_address');

  // Check if address isn't empty
  if ($address != '') {
    $geolocation = _mapbox_geocode($address); // geocode the address

    // Set latitude
    $form_state->setValue('field_geolocation_proximity-lat', $geolocation[1]);

    // Set longitude
    $form_state->setValue('field_geolocation_proximity-lng', $geolocation[0]);
  }
}

/**
 * Geocode address via Mapbox API
 */
function _mapbox_geocode($address) {

  //Set Mapbox API endpoint
  $endpoint = 'https://api.mapbox.com/geocoding/v5/mapbox.places/';

  // Set Mapbox API
  $config = \Drupal::config('parish_school_locator.mapbox');
  $token = $config->get('mapbox_api_token');

  // Assemble request URL
  $url = $endpoint . $address . '.json?access_token=' . $token;

  // Initialize Guzzle HTTP client
  $client = \Drupal::httpClient();

  try {
    $request = $client->get($url);  // make API call
    $response = $request->getBody();  // get API response
    $output = (array) json_decode($response);  // convert JSON to array
    $output = (array) $output['features'][0]; // get features array
    $output = $output['center']; // get lat/lng center
  }
  catch (RequestException $e) {
    watchdog_exception('parish_school_locator', $e->getMessage());
  }

  return $output;
}

/**
 * Implements hook_views_pre_render().
 */
function parish_school_locator_views_pre_render(\Drupal\views\ViewExecutable $view) {
    if (isset($view) && ($view->storage->id() == 'parish_finder')) {
        $view->element['#attached']['library'][] = 'parish_school_locator/parish_school_locator';
    }
    if (isset($view) && ($view->storage->id() == 'school_finder')) {
        $view->element['#attached']['library'][] = 'parish_school_locator/parish_school_locator';
    }
}